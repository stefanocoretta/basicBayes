---
title: "Tutorial 01: BRM basics"
execute: 
  cache: true
---

```{r}
#| label: pkgs
#| message: false
#| echo: false

library(tidyverse)
theme_set(theme_light())

library(brms)

polite <- read_csv("data/polite.csv") %>%
  drop_na()
```

## Get started

The tutorials are designed to be self-paced hands-ons to give you the chance to practice running Bayesian linear models in a semi-guided way.

To start, double click on the `basicBayesKit.Rproj` file to open the RStudio project with all the necessary files.

In the project folder, you will find the data in the `data/` folder and a script called `code.R` where you will be writing your R code.

I have pre-filled the script with some necessary code to attach a few packages and read the data.

## The `polite` data

The `polite` data contains several acoustic measures of the speech of Korean students living in Germany who where asked to speak using a formal (`pol`) or informal (`inf`) register (see column `attitude`).

```{r}
#| label: polite
#| echo: false

polite
```

In this tutorial we will focus on three variables:

- `f0mn`: the mean f0 across the entire utterance.
- `attitude`: `inf`ormal vs `pol`ite condition.
- `articulation_rate`: number of syllables per second.

Here's what the data looks like.

```{r}
#| label: f0-plot
#| echo: false

polite %>%
  ggplot(aes(articulation_rate, f0mn, colour = attitude)) +
  geom_point(alpha = 0.6) +
  geom_smooth(method = "lm", formula = y ~ x)
```

We want now to estimate the effect of `attitude` and `articulation_rate` on `f0mn`.

We can do that using the function `brm()` from the brms package and fit a Bayesian linear model.

## `brm()` basics

Let's assume mean f0 values are distributed according to a Gaussian distribution (you may also have encountered Gaussian distributions under the name "normal distribution").

$$f0mn \sim Gaussian(\mu, \sigma)$$

We want to estimate the following probability distributions:

$$
\begin{aligned}
\mu & \sim Gaussian(\mu_1, \sigma_1) \\
\sigma & \sim Gaussian_+(\mu_2, \sigma_2)
\end{aligned}
$$

We can achieve this by modelling the data using the `brm()` function from the brms package (BRM stands for Bayesian Regression Model). Note that regression is a synonym of linear model.

```{r}
#| label: f0mn-bm-1
#| eval: false

f0mn_bm_1 <- brm(
  f0mn ~ 1,
  family = gaussian(),
  data = polite,
  backend = "cmdstanr"
)
```

```{r}
#| label: f0mn-bm-1-2
#| echo: false
#| message: false

f0mn_bm_1 <- brm(
  f0mn ~ 1,
  family = gaussian(),
  data = polite,
  backend = "cmdstanr",
  file = "data/cache/f0mn_bm_1.rds"
)
```

You will see the message `Compiling Stan program...` followed by `Start sampling` and `Running MCMC with 4 sequential chains...`. Something like in the figure below.

![](/img/mcmc-messages.png)

It is OK if you don't understand this. [Stan](https://mc-stan.org) is a programming language that can run Bayesian models. `brm()` is an R interface to Stan, so that you can use R and R syntax to run Bayesian models without having to learn Stan! (If you feel adventurous, nobody stops you from learning Stan too, although it is not required and you can use R to run even very complex models).

After those initial messages, you will see a list of messages about **chains** and **interactions**, as in the figure below.

![](/img/mcmc-chains-info.png)

These are about the MCMC stuff mentioned in one of the messages above: MCMC stands for Markov-Chain Monte Carlo. Keep reading for a quick intro.

### Markov-Chain Monte Carlo (MCMC)

::: {.callout-tip icon="false"}
#### MCMC

Markov-Chain Monte Carlo refers to a set of algorithms used to estimate parameters of unknown distributions, based on repeated draws from parameter values and observed data.
:::

You don't need to understand the details of this. Just remember that several draws are made (i.e. the algorithm is run for several **iterations**), and that the model runs 4 **chains** of these iterations.

You will learn how to use information about the MCMC chains to diagnose the robustness of the estimated parameters later in the workshop.

### Model summary

Now we can inspect the model output using the `summary()` function.

```{r}
#| label: f0mn-bm-1-summ

summary(f0mn_bm_1)

```

We have seen a summary of a model where we were estimating RT values.

The results are in the `Population-Level Effects` and `Family Specific Parameters` parts.

For `(Intercept)` ($\mu$):

-   `Estimate` is $\mu_1$: 198 hz.

-   `Est.Error` is $\sigma_1$: 4.71 hz.

For `sd__Observation` ($\sigma$):

-   `Estimate` is $\mu_2$: 70 hz.

-   `Est.Error` is $\sigma_2$: 3.05 hz.

In other words:

$$
\begin{aligned}
f0mn & \sim Gaussian(\mu, \sigma) \\
\\
\mu & \sim Gaussian(198, 4.71) \\
\sigma & \sim Gaussian_+(70, 3.05)
\end{aligned}
$$

Based on the model summary, we also know the **95% Credible Intervals** (or CrIs) of the probability distributions of $\mu$ and $sigma$. They are under the labels `l-95% CI` and `u-95% CI`.

::: {.callout-tip icon="false"}
#### Credible Interval

A 95% (Bayesian) Credible Interval indicates the range of values we can be 95% confident contains the true parameter value.
:::

-   At 95% confidence, the mean ($\mu$) `f0mn` value is between 189 and 207 hz.

-   As for the standard deviation ($\sigma$), we can be 95% confident that it is between 64 and 77 hz.



